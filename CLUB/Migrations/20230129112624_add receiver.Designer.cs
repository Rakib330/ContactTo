// <auto-generated />
using System;
using CLUB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MailSMS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230129112624_add receiver")]
    partial class addreceiver
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CLUB.Data.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("org");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Auth.DbChangeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<string>("entityName")
                        .HasMaxLength(300);

                    b.Property<string>("entityState")
                        .HasMaxLength(100);

                    b.Property<string>("fieldName")
                        .HasMaxLength(200);

                    b.Property<string>("fieldValue");

                    b.Property<int>("isDelete");

                    b.Property<string>("remarks")
                        .HasMaxLength(300);

                    b.Property<long>("sessionId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("DbChangeHistories");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Auth.UserBackup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AspnetId");

                    b.Property<string>("EmpCode");

                    b.Property<decimal?>("MaxAmount");

                    b.Property<int?>("companyId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<string>("deleteBy");

                    b.Property<string>("email");

                    b.Property<int?>("isActive");

                    b.Property<int>("isDelete");

                    b.Property<string>("org");

                    b.Property<int?>("specialBranchUnitId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.Property<int?>("userId");

                    b.Property<string>("userName");

                    b.Property<int?>("userTypeId");

                    b.HasKey("Id");

                    b.ToTable("userBackups");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Auth.UserLogHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("browserName")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<string>("ipAddress")
                        .HasMaxLength(250);

                    b.Property<int>("isDelete");

                    b.Property<DateTime>("logTime")
                        .HasMaxLength(250);

                    b.Property<string>("pcName")
                        .HasMaxLength(250);

                    b.Property<int?>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.Property<string>("userId")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("userLogHistories");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Auth.UserOTPLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<DateTime?>("expireDate");

                    b.Property<int>("isDelete");

                    b.Property<string>("otp");

                    b.Property<string>("receiver");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.Property<string>("username");

                    b.HasKey("Id");

                    b.ToTable("userOTPLogs");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Auth.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.Property<string>("userTypeName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("userTypeNameBn")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Bulk.BulkHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<DateTime>("date");

                    b.Property<int?>("employeeId");

                    b.Property<int?>("groupId");

                    b.Property<int>("isDelete");

                    b.Property<string>("number");

                    b.Property<string>("text");

                    b.Property<int>("type");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("bulkHistories");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Bulk.MemberGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("name");

                    b.Property<string>("remarks");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("memberGroups");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Bulk.Receiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<string>("email");

                    b.Property<int>("isDelete");

                    b.Property<string>("mobile");

                    b.Property<string>("name");

                    b.Property<string>("receiverCode");

                    b.Property<string>("receiverType");

                    b.Property<string>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("Receiver");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Bulk.ReceiverGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("name");

                    b.Property<string>("remarks");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("receiverGroups");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Bulk.RlnMemberGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int?>("employeeId");

                    b.Property<int>("isDelete");

                    b.Property<int?>("memberGroupId");

                    b.Property<string>("type");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.HasIndex("memberGroupId");

                    b.ToTable("rlnMemberGroups");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Bulk.RlnReceiverGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<int?>("receiverGroupId");

                    b.Property<int?>("receiverId");

                    b.Property<string>("type");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("receiverGroupId");

                    b.HasIndex("receiverId");

                    b.ToTable("rlnreceiverGroups");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Bulk.SendHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<DateTime>("date");

                    b.Property<string>("email");

                    b.Property<int?>("groupId");

                    b.Property<int>("isDelete");

                    b.Property<string>("number");

                    b.Property<int?>("receiverId");

                    b.Property<string>("text");

                    b.Property<int>("type");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("sendHistorys");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("blockSector");

                    b.Property<int?>("countryId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int?>("districtId");

                    b.Property<int?>("divisionId");

                    b.Property<int>("employeeId");

                    b.Property<string>("houseVillage");

                    b.Property<int>("isDelete");

                    b.Property<string>("postCode");

                    b.Property<string>("postOffice");

                    b.Property<string>("roadNumber");

                    b.Property<int?>("thanaId");

                    b.Property<string>("type")
                        .IsRequired();

                    b.Property<string>("union");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("countryId");

                    b.HasIndex("districtId");

                    b.HasIndex("divisionId");

                    b.HasIndex("employeeId");

                    b.HasIndex("thanaId");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.Children", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bin");

                    b.Property<string>("bloodGroup");

                    b.Property<string>("childName");

                    b.Property<string>("childNameBN");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<DateTime?>("dateOfBirth");

                    b.Property<string>("designation");

                    b.Property<int>("disability");

                    b.Property<string>("education");

                    b.Property<int>("employeeId");

                    b.Property<string>("gender");

                    b.Property<int>("isDelete");

                    b.Property<string>("nid")
                        .HasMaxLength(100);

                    b.Property<string>("occupation");

                    b.Property<string>("organization");

                    b.Property<string>("spacialSkillIds");

                    b.Property<string>("spacialSkills");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.ToTable("childrens");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.DrivingLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("category");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<DateTime?>("dateOfExpair");

                    b.Property<DateTime?>("dateOfIssue");

                    b.Property<int>("employeeId");

                    b.Property<int>("isDelete");

                    b.Property<string>("licenseNumber");

                    b.Property<string>("placeOfIssue");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.ToTable("drivingLicenses");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.EducationalQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int?>("degreeId");

                    b.Property<int>("employeeId");

                    b.Property<string>("grade");

                    b.Property<string>("institution");

                    b.Property<int>("isDelete");

                    b.Property<string>("majorGroup");

                    b.Property<int?>("organizationId");

                    b.Property<int?>("passingYear");

                    b.Property<int?>("reldegreesubjectId");

                    b.Property<int?>("resultId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("degreeId");

                    b.HasIndex("employeeId");

                    b.HasIndex("organizationId");

                    b.HasIndex("reldegreesubjectId");

                    b.HasIndex("resultId");

                    b.ToTable("educationalQualifications");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.EmployeeAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("awardDate");

                    b.Property<string>("awardName");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("employeeId");

                    b.Property<int>("isDelete");

                    b.Property<string>("issuedBy");

                    b.Property<string>("purpose");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.ToTable("employeeAwards");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.EmployeeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("LPRDate");

                    b.Property<string>("PRLEndDate");

                    b.Property<string>("PRLStartDate");

                    b.Property<string>("batch");

                    b.Property<string>("birthIdentificationNo")
                        .HasMaxLength(100);

                    b.Property<string>("birthPlace");

                    b.Property<string>("bloodGroup");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<DateTime?>("dateOfBirth");

                    b.Property<DateTime?>("dateOfPermanent");

                    b.Property<DateTime?>("dateofregularity");

                    b.Property<string>("designation");

                    b.Property<int>("designationCheck");

                    b.Property<string>("disability");

                    b.Property<string>("emailAddress");

                    b.Property<string>("emailAddressPersonal");

                    b.Property<string>("employeeCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("employeeTypeId");

                    b.Property<string>("fatherNameBangla");

                    b.Property<string>("fatherNameEnglish");

                    b.Property<bool>("freedomFighter");

                    b.Property<string>("freedomFighterNo");

                    b.Property<string>("gender");

                    b.Property<string>("govtID")
                        .HasMaxLength(250);

                    b.Property<string>("gpfAcNo");

                    b.Property<string>("gpfNomineeName");

                    b.Property<string>("homeDistrict");

                    b.Property<int>("isDelete");

                    b.Property<DateTime?>("joiningDateGovtService");

                    b.Property<DateTime?>("joiningDatePresentWorkstation");

                    b.Property<string>("joiningDesignation");

                    b.Property<string>("maritalStatus");

                    b.Property<string>("mobileNumberOffice")
                        .HasMaxLength(50);

                    b.Property<string>("mobileNumberPersonal")
                        .HasMaxLength(50);

                    b.Property<string>("motherNameBangla");

                    b.Property<string>("motherNameEnglish");

                    b.Property<string>("nameBangla");

                    b.Property<string>("nameEnglish");

                    b.Property<string>("nationalID")
                        .HasMaxLength(100);

                    b.Property<string>("nationality");

                    b.Property<string>("natureOfRequitment")
                        .HasMaxLength(100);

                    b.Property<string>("orgType")
                        .HasMaxLength(100);

                    b.Property<string>("pabx");

                    b.Property<int?>("post");

                    b.Property<int?>("religionId");

                    b.Property<string>("seniorityNumber")
                        .HasMaxLength(50);

                    b.Property<string>("spacialSkillIds");

                    b.Property<string>("spacialSkills");

                    b.Property<string>("specialSkill");

                    b.Property<string>("tShirtSize");

                    b.Property<string>("telephoneOffice");

                    b.Property<string>("telephoneResidence");

                    b.Property<string>("tin");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("employeeTypeId");

                    b.HasIndex("religionId");

                    b.ToTable("employeeInfos");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.EmployeeLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("employeeId");

                    b.Property<int>("isDelete");

                    b.Property<int?>("languageId");

                    b.Property<string>("proficiency")
                        .HasMaxLength(100);

                    b.Property<string>("reading")
                        .HasMaxLength(50);

                    b.Property<string>("speaking")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.Property<string>("writing")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.HasIndex("languageId");

                    b.ToTable("employeeLanguages");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.EmployeeMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("employeeId");

                    b.Property<int>("isDelete");

                    b.Property<int?>("membershipId");

                    b.Property<string>("membershipType");

                    b.Property<string>("nameOrganization");

                    b.Property<string>("remarks");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.HasIndex("membershipId");

                    b.ToTable("employeeMemberships");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.PassportDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<DateTime?>("dateOfExpair");

                    b.Property<DateTime?>("dateOfIssue");

                    b.Property<int>("employeeId");

                    b.Property<int>("isDelete");

                    b.Property<string>("passportNumber");

                    b.Property<string>("placeOfIssue");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.ToTable("passportDetails");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.Photograph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("employeeId");

                    b.Property<int>("isDelete");

                    b.Property<string>("remarks");

                    b.Property<string>("type")
                        .IsRequired();

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.Property<string>("url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.ToTable("photographs");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("employeeId");

                    b.Property<int>("isDelete");

                    b.Property<DateTime?>("publicationDate");

                    b.Property<string>("publicationName");

                    b.Property<string>("publicationNubmer");

                    b.Property<string>("publicationPlace");

                    b.Property<string>("publicationType");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.ToTable("publications");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.Spouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bin");

                    b.Property<string>("bloodGroup");

                    b.Property<string>("contact");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<DateTime?>("dateOfBirth");

                    b.Property<DateTime?>("dateOfMarriage");

                    b.Property<string>("designation");

                    b.Property<string>("email");

                    b.Property<int>("employeeId");

                    b.Property<string>("gender");

                    b.Property<string>("highestEducation");

                    b.Property<string>("homeDistrict");

                    b.Property<int>("isDelete");

                    b.Property<string>("nid");

                    b.Property<string>("occupation");

                    b.Property<string>("organization");

                    b.Property<string>("spacialSkillIds");

                    b.Property<string>("spacialSkills");

                    b.Property<string>("spouseName");

                    b.Property<string>("spouseNameBN");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.ToTable("spouses");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.TraningLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("countryId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("employeeId");

                    b.Property<DateTime?>("fromDate");

                    b.Property<int>("isDelete");

                    b.Property<string>("remarks");

                    b.Property<string>("sponsoringAgency");

                    b.Property<DateTime?>("toDate");

                    b.Property<int?>("trainingCategoryId");

                    b.Property<int?>("trainingInstituteId");

                    b.Property<string>("trainingTitle");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("countryId");

                    b.HasIndex("employeeId");

                    b.HasIndex("trainingCategoryId");

                    b.HasIndex("trainingInstituteId");

                    b.ToTable("traningLogs");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.TransferLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<string>("department");

                    b.Property<string>("designation");

                    b.Property<int>("employeeId");

                    b.Property<DateTime?>("from");

                    b.Property<int>("isDelete");

                    b.Property<int?>("salaryGradeId");

                    b.Property<DateTime?>("to");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.Property<string>("workStation");

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.HasIndex("salaryGradeId");

                    b.ToTable("transferLogs");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.ActivityStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("shortName");

                    b.Property<string>("statusName")
                        .IsRequired();

                    b.Property<string>("statusNameBn");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("activityStatuses");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("awardName")
                        .IsRequired();

                    b.Property<string>("awardNameBn");

                    b.Property<string>("awardShortName");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("awards");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.BookCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bookCategoey")
                        .IsRequired();

                    b.Property<string>("bookCategoeyBn");

                    b.Property<string>("bookCategoryShortName");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("bookCategories");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Cadre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cadreName")
                        .IsRequired();

                    b.Property<string>("cadreNameBn");

                    b.Property<string>("cadreShortName");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("cadres");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("countryCode")
                        .IsRequired();

                    b.Property<string>("countryName")
                        .IsRequired();

                    b.Property<string>("countryNameBn");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("shortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.CourseTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("nameBN");

                    b.Property<string>("nameEN");

                    b.Property<string>("remarks");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("courseTitles");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<string>("degreeName")
                        .IsRequired();

                    b.Property<string>("degreeNameBn");

                    b.Property<string>("degreeShortName");

                    b.Property<int>("isDelete");

                    b.Property<int>("levelofeducationId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("levelofeducationId");

                    b.ToTable("degrees");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<string>("deptCode")
                        .IsRequired();

                    b.Property<string>("deptName")
                        .IsRequired();

                    b.Property<string>("deptNameBn");

                    b.Property<int>("isDelete");

                    b.Property<string>("shortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<string>("designationCode")
                        .IsRequired();

                    b.Property<string>("designationName")
                        .IsRequired();

                    b.Property<string>("designationNameBN");

                    b.Property<int>("isDelete");

                    b.Property<string>("shortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("designations");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<string>("districtCode")
                        .IsRequired();

                    b.Property<string>("districtName")
                        .IsRequired();

                    b.Property<string>("districtNameBn");

                    b.Property<int>("divisionId");

                    b.Property<int>("isDelete");

                    b.Property<string>("shortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("divisionId");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("countryId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<string>("divisionCode")
                        .IsRequired();

                    b.Property<string>("divisionName")
                        .IsRequired();

                    b.Property<string>("divisionNameBn");

                    b.Property<int>("isDelete");

                    b.Property<string>("shortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("countryId");

                    b.ToTable("divisions");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("charge");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<string>("empType")
                        .IsRequired();

                    b.Property<string>("empTypeBn");

                    b.Property<int>("isDelete");

                    b.Property<string>("shortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("employeeTypes");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.EventCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("name");

                    b.Property<string>("remarks");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("eventCategories");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<string>("holidayName")
                        .IsRequired();

                    b.Property<string>("holidayNameBn");

                    b.Property<int>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.Property<string>("weeklyHoliday")
                        .IsRequired();

                    b.Property<int>("year");

                    b.HasKey("Id");

                    b.ToTable("holidays");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("languageName")
                        .IsRequired();

                    b.Property<string>("languageNameBn");

                    b.Property<string>("languageShortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("languages");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.LevelofEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("levelofeducationName")
                        .IsRequired();

                    b.Property<string>("levelofeducationNameBn");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("levelofEducations");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("membershipName")
                        .IsRequired();

                    b.Property<string>("membershipNameBn");

                    b.Property<string>("membershipShortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("memberships");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.MunicipilityLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("locationName")
                        .IsRequired();

                    b.Property<string>("locationNameBn");

                    b.Property<string>("shortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("municipilityLocations");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.NoticeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("name");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("noticeTypes");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("occupationName")
                        .IsRequired();

                    b.Property<string>("occupationNameBn");

                    b.Property<string>("occupationShortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("occupations");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("organizationName")
                        .IsRequired();

                    b.Property<string>("organizationNameBn");

                    b.Property<string>("organizationType")
                        .IsRequired();

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("organizations");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.ParticipantHead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("name");

                    b.Property<string>("remarks");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("participantHeads");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.ParticipantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("name");

                    b.Property<string>("remarks");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("participantTypes");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.RelDegreeSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("degreeId");

                    b.Property<int>("isDelete");

                    b.Property<int>("subjectId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("degreeId");

                    b.HasIndex("subjectId");

                    b.ToTable("relDegreeSubjects");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("relationName")
                        .IsRequired();

                    b.Property<string>("relationNameBn");

                    b.Property<string>("relationShortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("relations");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("name")
                        .IsRequired();

                    b.Property<string>("nameBn");

                    b.Property<string>("shortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("religions");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<decimal>("resultMaxValue");

                    b.Property<string>("resultName")
                        .IsRequired();

                    b.Property<string>("resultNameBn");

                    b.Property<string>("resultShortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("results");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.SalaryGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("basicAmount");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<decimal>("currentBasic");

                    b.Property<string>("gradeName")
                        .IsRequired();

                    b.Property<int>("isDelete");

                    b.Property<string>("payScale")
                        .IsRequired();

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("salaryGrades");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.ServiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("statusName")
                        .IsRequired();

                    b.Property<string>("statusNameBn");

                    b.Property<string>("statusShortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("serviceStatuses");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.SpacialSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("shortName");

                    b.Property<string>("skilName")
                        .IsRequired();

                    b.Property<string>("skilNameBn");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("spacialSkills");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("subjectName")
                        .IsRequired();

                    b.Property<string>("subjectNameBn");

                    b.Property<string>("subjectShortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Thana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("districtId");

                    b.Property<int>("isDelete");

                    b.Property<string>("shortName");

                    b.Property<string>("thanaCode")
                        .IsRequired();

                    b.Property<string>("thanaName")
                        .IsRequired();

                    b.Property<string>("thanaNameBn");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("districtId");

                    b.ToTable("thanas");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.TrainingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("trainingCategoryName")
                        .IsRequired();

                    b.Property<string>("trainingCategoryNameBn");

                    b.Property<string>("trainingCategoryShortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("trainingCategories");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.TrainingInstitute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("trainingInstituteName")
                        .IsRequired();

                    b.Property<string>("trainingInstituteNameBn");

                    b.Property<string>("trainingInstituteShortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("trainingInstitutes");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.TravelPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("purposeName")
                        .IsRequired();

                    b.Property<string>("purposeNameBn");

                    b.Property<string>("purposeShortName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("travelPurposes");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.Property<string>("vehicleShortName");

                    b.Property<string>("vehicleType")
                        .IsRequired();

                    b.Property<string>("vehicleTypeBn");

                    b.HasKey("Id");

                    b.ToTable("vehicles");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("remarks");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.Property<string>("year");

                    b.HasKey("Id");

                    b.ToTable("years");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Navbar.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int>("isDelete");

                    b.Property<string>("isTeam");

                    b.Property<string>("moduleName");

                    b.Property<string>("moduleNameBN");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.ToTable("modules");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Navbar.ModuleAccessPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("applicationRoleId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int?>("eRPModuleId");

                    b.Property<int>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("applicationRoleId");

                    b.HasIndex("eRPModuleId");

                    b.ToTable("moduleAccessPages");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Navbar.Navbars", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("action")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("activeLi")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("area")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("controller")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int?>("displayOrder");

                    b.Property<string>("imageClass")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("isDelete");

                    b.Property<int?>("isParent");

                    b.Property<int?>("moduleId");

                    b.Property<string>("nameOption")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("nameOptionBangla")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("parentID");

                    b.Property<bool>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("moduleId");

                    b.ToTable("navbars");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Navbar.UserAccessPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("applicationRoleId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<int?>("isAccess");

                    b.Property<int>("isDelete");

                    b.Property<int?>("navbarId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("applicationRoleId");

                    b.HasIndex("navbarId");

                    b.ToTable("userAccessPages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Auth.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("roleNature");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Bulk.RlnMemberGroup", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Employee.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId");

                    b.HasOne("CLUB.Data.Entity.Bulk.MemberGroup", "memberGroup")
                        .WithMany()
                        .HasForeignKey("memberGroupId");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Bulk.RlnReceiverGroup", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Bulk.ReceiverGroup", "receiverGroup")
                        .WithMany()
                        .HasForeignKey("receiverGroupId");

                    b.HasOne("CLUB.Data.Entity.Bulk.Receiver", "receiver")
                        .WithMany()
                        .HasForeignKey("receiverId");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.Address", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Master.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId");

                    b.HasOne("CLUB.Data.Entity.Master.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId");

                    b.HasOne("CLUB.Data.Entity.Master.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId");

                    b.HasOne("CLUB.Data.Entity.Employee.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CLUB.Data.Entity.Master.Thana", "thana")
                        .WithMany()
                        .HasForeignKey("thanaId");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.Children", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Employee.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.DrivingLicense", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Employee.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.EducationalQualification", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Master.Degree", "degree")
                        .WithMany()
                        .HasForeignKey("degreeId");

                    b.HasOne("CLUB.Data.Entity.Employee.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CLUB.Data.Entity.Master.Organization", "organization")
                        .WithMany()
                        .HasForeignKey("organizationId");

                    b.HasOne("CLUB.Data.Entity.Master.RelDegreeSubject", "reldegreesubject")
                        .WithMany()
                        .HasForeignKey("reldegreesubjectId");

                    b.HasOne("CLUB.Data.Entity.Master.Result", "result")
                        .WithMany()
                        .HasForeignKey("resultId");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.EmployeeAward", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Employee.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.EmployeeInfo", b =>
                {
                    b.HasOne("CLUB.Data.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("CLUB.Data.Entity.Master.EmployeeType", "employeeType")
                        .WithMany()
                        .HasForeignKey("employeeTypeId");

                    b.HasOne("CLUB.Data.Entity.Master.Religion", "religion")
                        .WithMany()
                        .HasForeignKey("religionId");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.EmployeeLanguage", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Employee.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CLUB.Data.Entity.Master.Language", "language")
                        .WithMany()
                        .HasForeignKey("languageId");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.EmployeeMembership", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Employee.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CLUB.Data.Entity.Master.Membership", "membership")
                        .WithMany()
                        .HasForeignKey("membershipId");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.PassportDetails", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Employee.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.Photograph", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Employee.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.Publication", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Employee.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.Spouse", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Employee.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.TraningLog", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Master.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId");

                    b.HasOne("CLUB.Data.Entity.Employee.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CLUB.Data.Entity.Master.TrainingCategory", "trainingCategory")
                        .WithMany()
                        .HasForeignKey("trainingCategoryId");

                    b.HasOne("CLUB.Data.Entity.Master.TrainingInstitute", "trainingInstitute")
                        .WithMany()
                        .HasForeignKey("trainingInstituteId");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Employee.TransferLog", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Employee.EmployeeInfo", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CLUB.Data.Entity.Master.SalaryGrade", "salaryGrade")
                        .WithMany()
                        .HasForeignKey("salaryGradeId");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Degree", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Master.LevelofEducation", "levelofeducation")
                        .WithMany()
                        .HasForeignKey("levelofeducationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.District", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Master.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Division", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Master.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.RelDegreeSubject", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Master.Degree", "degree")
                        .WithMany()
                        .HasForeignKey("degreeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CLUB.Data.Entity.Master.Subject", "subject")
                        .WithMany()
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLUB.Data.Entity.Master.Thana", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Master.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CLUB.Data.Entity.Navbar.ModuleAccessPage", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Auth.ApplicationRole", "applicationRole")
                        .WithMany()
                        .HasForeignKey("applicationRoleId");

                    b.HasOne("CLUB.Data.Entity.Navbar.Module", "eRPModule")
                        .WithMany()
                        .HasForeignKey("eRPModuleId");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Navbar.Navbars", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Navbar.Module", "module")
                        .WithMany()
                        .HasForeignKey("moduleId");
                });

            modelBuilder.Entity("CLUB.Data.Entity.Navbar.UserAccessPage", b =>
                {
                    b.HasOne("CLUB.Data.Entity.Auth.ApplicationRole", "applicationRole")
                        .WithMany()
                        .HasForeignKey("applicationRoleId");

                    b.HasOne("CLUB.Data.Entity.Navbar.Navbars", "navbar")
                        .WithMany()
                        .HasForeignKey("navbarId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CLUB.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CLUB.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CLUB.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CLUB.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
